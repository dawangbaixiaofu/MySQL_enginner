1.查询优化方式

1.首先考虑在where和group by的字段上建立索引
2.避免在where字段进行null值的判断，索引不会对null建立索引。
会进行全表的扫描

3.where字句中尽量不要使用!=和<>，否则引擎会放弃使用索引进行全表扫描
在where字句中避免使用or，应该使用union代替
4.尽量不要使用In和not in，否则回导致全表的扫描
可以的话使用between代替
使用exits 代替in
5.like '%acd%'会使用全表扫描
like 'acd%'会使用索引
6.where 子句中使用参数，也会导致全表扫描
select id from t where num = @num
可以改为强制查询使用索引：
select id from t with(index(索引名)) where num = @num
7.尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。
select id from t where num/2 = 100;
应改为:
select id from t where num = 100*2;
9.避免在where子句中对字段进行函数操作
select id from t where substring(name,1,3) = ’abc’
select id from t where datediff(day,createdate,’2005-11-30′) = 0
改成
select id from t where name like 'abc%'
select id from t where createdate >= '2005-11-30' and createdate < '2005-12-1'
10.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。
11.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。
13.Update 语句，如果只更改1、2个字段，不要Update全部字段，否则频繁调用会引起明显的性能消耗，同时带来大量日志。
14.对于多张大数据量（这里几百条就算大了）的表JOIN，要先分页再JOIN，否则逻辑读会很高，性能很差。

